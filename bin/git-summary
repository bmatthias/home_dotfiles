#!/usr/bin/env bash

# wrapper to support different date commands
# transforms GNU format to BSD format
__date()
{
  typeset _given_date _output_format
  _output_format="$1"
  shift
  _given_date="${1:-}"
  (( $# == 0 )) || shift

  case "$(uname)" in
    (Darwin)
      typeset _iterator _replacement
      typeset -a _date_args
      _date_args=()
      while (( $# ))
      do
        _iterator="-v$1"
        _iterator="${_iterator//hour/Hour}"
        for _replacement in month week day Hour
        do
          _iterator="${_iterator//${_replacement}s/${_replacement:0:1}}"
          _iterator="${_iterator//${_replacement}/${_replacement:0:1}}"
        done
        shift
        _date_args+=( "${_iterator}" )
      done
      case "${_given_date}" in
        (*[[:space:]]*[[:space:]]+*) # includes timezone
          _date_args+=( -f "%F %T %z" "${_given_date}" )
          ;;
        (*[[:space:]]*) # includes time
          _date_args+=( -f "%F %T" "${_given_date}" )
          ;;
        ("") # empty
          true
          ;;
        (*)
          _date_args+=( -f %F "${_given_date}" )
          ;;
      esac
      date -j "${_date_args[@]}" "${_output_format}"
      ;;
    (*)
      date --date="${_given_date} $*" "${_output_format}"
      ;;
  esac
}
export -f __date

case "${1:-month}" in
  (week)
    week=$( __date +%W "" ${2:-0}week )
    before="$( __date +%F "$(date +%Y)-01-01" "+${week}week"         "+1day" )"
    after="$(  __date +%F "$(date +%Y)-01-01" "+$(( week - 1 ))week" "+1day" )"
    ;;
  (month)
    month=${2:-$( date +%m )}
    if
      (( $( date +%d ) > 15 ))
    then
      after=$( __date +%F        "$( date +%Y-$month-01 )" )
      before=$( __date +%Y-%m-01 "$( date +%Y-$month-15 )" +1month -1day )
    else
      after=$( __date +%F        "$( date +%Y-$month-01 )" -1month)
      before=$( __date +%Y-%m-01 "$( date +%Y-$month-15 )" -1day )
    fi
    ;;
  (since)
    before=$(date +%F)
    shift
    after=$(date --date="$*" +%F)
    ;;
  (help|--help)
    printf "%b" "Usage:
    $0 week [-{number}]   # show summary for current/relative week
    $0 [month [{number}]] # show summary for current/given month
    $0 since {date}       # show summary since the given date, check 'info date' for info
    $0 help               # this help
"
    exit 0
    ;;
esac

[[ -n "${after:-}" && -n "${before:-}" ]] ||
{
  echo "could not calculate timeline!"
  exit 1
}

projects_root="$( git config --get projects.root )"
[[ -n "${projects_root:-}" ]] ||
{
  echo "projects.root not set, try: git config --global projects.root ~/projects"
  exit 2
}

eval "projects_root=\"${projects_root%/}\""
projects_depth=$( git config --get projects.depth )
projects_depth=${projects_depth:-3}
projects_depth=$((projects_depth + 2))

IFS=$'\n'
projects=( $(
  find "$projects_root" -maxdepth $projects_depth -path "*/.git/config"
) )

day_start=$( git config --get projects.day.start )
day_end=$(   git config --get projects.day.end   )
after="$( __date "+%F %T %z" "$after 00:00:00" ${day_start:-+6hours} )"
before="$( __date "+%F %T %z" "$before 00:00:00" ${day_end:-+6hours} )"
params=( --after="$after"  )
if (( $( __date +%s "$before" ) < $( date +%s ) ))
then params+=( --before="$before" )
fi
#TODO: add support for: params+=( --no-merges )

echo "#Timeline: $after - $before"

for r in "${projects[@]}"
do
  r="${r%/.git/config}" # path to project
  data="$(
    builtin cd $r;
    user_email="$( git config --get user.email )" # allow per project
    git log --pretty=format:"%h,%ci,%s" "${params[@]}" --author="$user_email"
  )"
  [[ -z "$data" ]] ||
  {
    printf "%b" "--- ${r#${projects_root}/}:\n" # relative path to project
    printf "%b" "$data\n" | awk -F, '{"__date +\"%F %T\" "$2 | getline $2} {print}' | sort -k 2 -k 3
  }
done

echo "#Timeline: $after - $before"
